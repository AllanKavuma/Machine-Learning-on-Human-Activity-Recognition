head(ToothGrowth)
d <- dcast(data = ToothGrowth, supp ~ len, value.var %in% c("OJ", "VC"))
d
d <- dcast(data = ToothGrowth, len ~ supp, value.var %in% c("OJ", "VC"))
head(ToothGrowth)
d <- dcast(ToothGrowth, supp ~ dose, value.var = "len")
d <- dcast(ToothGrowth, supp ~ dose, value.var = "len", mean())
d <- dcast(ToothGrowth, supp ~ dose, value= "len")
d <- dcast(ToothGrowth, supp ~ dose, value= len)
head(ToothGrowth)
d <- dcast(ToothGrowth, ...~ len)
d
melt(d, id = c("OJ", "VC"))
melt(d, id = c("supp"))
head(ToothGrowth)
d <- dcast(ToothGrowth, len ~ supp ~ dose)
d
d <- dcast(ToothGrowth,  supp + dose ~ len)
d
head(d)
d <- dcast(ToothGrowth,  supp + dose ~ len, mean)
d
d <- dcast(ToothGrowth,  supp + dose ~ len, mean, na.rm = TRUE)
d
d <- dcast(ToothGrowth,  supp + dose ~ len, mean, nan.rm = TRUE)
d
d <- dcast(ToothGrowth,  supp + dose ~ len)
d
m <- melt(d, id = c("supp", "dose"))
m
m[m$value =1,]
m1 <- m[m$value ==1,]
m1
head(m1)
m <- melt(d, id = c("supp", "dose"), measure.vars = "len")
m
head(ToothGrowth)
vclen <- ToothGrowth[ToothGrowth$supp == VC,]$len
vclen <- ToothGrowth[ToothGrowth$supp == "VC",]$len
head(vclen)
length(vclen)
ojlen <- ToothGrowth[ToothGrowth$supp == "OJ",]$len
t.test(vclen, ojlen, paired = FALSE, var.equal = TRUE)
t.test(ojlen, vclen, paired = FALSE, var.equal = TRUE)
t.test(len ~ supp, paired = FALSE, var.equal = TRUE, data = ToothGrowth)
head(ToothGrowth)
t.test(len ~ supp, paired = FALSE, var.equal = TRUE, data = ToothGrowth)$conf
t.test(len ~ supp, paired = FALSE, var.equal = TRUE, data = ToothGrowth)$p
t.test(len ~ supp, paired = FALSE, var.equal = TRUE, data = ToothGrowth)$p-value
?t.test
t.test(len ~ supp, paired = FALSE, var.equal = TRUE, data = ToothGrowth)$p.value
var(vcData$len)
var(ojData$len)
sd(ojData$len)
sd(vcData$len)
t.test(ojlen, vclen, paired = FALSE, var.equal = TRUE)
z.test(ojlen, vclen, paired = FALSE, var.equal = TRUE)
Z.test(ojlen, vclen, paired = FALSE, var.equal = TRUE)
t.test(ojlen, vclen, paired = FALSE, var.equal = TRUE, conf.level = .9)
install.packages(knitr)
install.packages("knitr")
install.packages("knitr")
install.packages("markdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
library("rmarkdown")
library("markdown")
library("knitr")
library(knitr)
library("knitr")
library("rmarkdown")
library(rmarkdown)
library(swirl)
swirl()
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child, 3) ~ parent, galton)
plot(jitter(child, 4) ~ parent, galton)
?formula
regrline <- lm(child ~ parent, galton)
?abline
abline(regrline, lwd = 3, col = "red")
summary(regrline)
0
end()
info()
bye()
?knitr::include_graphics
library(UsingR)
data(father.son)
head(father.son)
fit <- lm(sheight ~ fheight, father.son)
fit
summary(fit)
fit$coefficients
summary(fit)$coef
ho = 0, ha !=0
fit1 <- lm(sheight ~ I(fheight - mean(fheight)), father.son)
summary(fit1)$coef
mean(fheight)
mean(father.son$fheight)
mean(father.son$sheight)
predict(fit, newdata = data.frame(fheight = 80))
predict(fit1, newdata = data.frame(fheight = 80))
predict(fit1, newdata = data.frame(fheight = 85))
predict(fit1, newdata = data.frame(fheight = 61))
summary(father.son)
data("mtcars")
head(mtcars)
fit <- lm(mpg ~ hp, data = mtcars)
summary(fit)$coefficients
fit1 <- lm(mpg ~ I(hp - mean(hp)), data = mtcars)
summary(fit1)$coefficients
mean(mtcars$hp)
mean(mtcars$mpg)
fit1 <- lm(I(mpg- mean(mpg) ~ I(hp - mean(hp)), data = mtcars)
)
fit1 <- lm(I(mpg- mean(mpg)) ~ I(hp - mean(hp)), data = mtcars)
summary(fit1)$coefficients
fit1 <- lm(I(mpg- mean(mpg)) ~ I(hp - mean(hp)) - 1, data = mtcars)
summary(fit1)$coefficients
g <- ggplot(data = mtcars, aes(x = hp, y = mpg))
g <- g + geom_point(cex = 2, alpha = 0.2, colour = "steelblue")
g <- geom_smooth(formula = fit, se =FALSE)
g
library(ggplot2)
g <- ggplot(data = mtcars, aes(x = hp, y = mpg))
g <- g + geom_point(cex = 2, alpha = 0.2, colour = "blue")
g
g <- geom_smooth(formula = fit, se =FALSE)
g
g <- geom_smooth(formula = "lm", se =FALSE)
g
fit
g <- ggplot(data = mtcars, aes(x = hp, y = mpg))
g <- g + geom_point(cex = 2, alpha = 0.2, colour = "blue")
g
g <- geom_smooth(formula = fit)
g
g <- ggplot(data = mtcars, aes(x = hp, y = mpg))
g <- g + geom_point(cex = 2, alpha = 0.2, colour = "blue")
g <- geom_smooth(method = fit)
g
g <- ggplot(data = mtcars, aes(x = hp, y = mpg))
g <- g + geom_point(cex = 2, alpha = 0.2, colour = "blue")
g <- g + geom_smooth(formula = fit)
g
g <- ggplot(data = mtcars, aes(x = hp, y = mpg))
g <- g + geom_point(cex = 2, alpha = 0.2, colour = "blue")
g <- g + geom_smooth(formula = fit)
g
g <- ggplot(data = mtcars, aes(x = hp, y = mpg))
g <- g + geom_point(cex = 2, alpha = 0.2, colour = "blue")
g <- g + geom_smooth(method = fit)
g
g <- g + geom_smooth(formula = fit)
g
g <- g + geom_smooth(method = lm)
g
fit
summary(fit)$coef
predict(fit, newdata = data.frame(hp = 111))
data("father.son")
fit <- lm(sheight ~ fheight, data = father.son)
summary(fit)$resi
summary(fit)$residuals
g <- ggplot(data = father.son, aes(x = fheight, y = summary(fit)$residuals))
g <- g + geom_point()
g
g <- ggplot(data = father.son, aes(x = fheight, y = summary(fit)$residuals))
g <- g + geom_point()
g <- ggplot(data = father.son, aes(x = fheight, y = summary(fit)$residuals))
g <- g + geom_point()
g <- ggplot(data = father.son, aes(x = fheight, y = summary(fit)$residuals))
g <- g + geom_point(colour = "blue", cex = 2, alpha = 0.5)
g
plot(fit)
g + geom_hline(yintercept = 0, colour = "red", lwd = 2)
plot(fit)
summary(fit)$residu
summary(fit)
summary(fit)$sigma
sqrt(sum(summary(fit)$residuals)) / (length(summary(fit)$residuals) - 2)
sqrt(sum(summary(fit)$residuals)) / n - 2
sqrt(sum(summary(fit)$residuals) ^2) / n - 2
sqrt(sum(summary(fit)$residuals)^2) / (length(summary(fit)$residuals) - 2)
fit
summary(fit)$sigma ^ 2
sum(residuals(fit)^2) / (nrow(father.son) - 2)
summary(fit)$R
summary(fit)
summary(fit)$R-squared
summary(fit)$r.squared
summary(fit)$r.squared
data("mtcars")
fit <- lm(mpg ~ hp, data = mtcars)
g <- ggplot(data = mtcars, aes(x = hp, y = residuals(fit)))
g + geom_point(cex = 2, alpha = 0.5)
g + geom_hline(yintercept = 0, colour = "red")
g <- ggplot(data = mtcars, aes(x = hp, y = residuals(fit)))
g <- g + geom_point(cex = 2, alpha = 0.5)
g <- g + geom_hline(yintercept = 0, colour = "red")
g + geom_hline(yintercept = 0, colour = "red")
plot(fit)
fit
summary(fit)
(sum(residuals(fit)^2))/(length(mtcars) - 2)
resid(fit)^2
residuals(fit)^2
(sum(residuals(fit)^2))/(nrow(mtcars) - 2)
summary(fit)$sigma
summary(fit)$sigma ^ 2
nrow(mtcars)
summary(fit)$r.squared
data("father.son")
head(father.son)
fit <- lm(sheight ~ fheight, data = father.son)
summary(fit)
confint(fit)
plot(fit)
rm(list = ls())
library(swirl)
swirl()
6
dim(InsectSprays)
head(InsectSprays, 15)
sa
sA
summary(M[,2])
summary(InsectSprays[,2])
sapply(InsectSprays, str())
rr = 1
class(rr)
sapply(InsectSprays, class)
fit <- lm(count ~ spray, InsectSprays)
fit$coefficients
summary(fit)$coefficients
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray - 1, InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, C)
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count ~ spray, InsectSprays)
fit <- lm(count ~ spray, InsectSprays)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[2] - fit$coef[3]) / 1.6011
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent - 1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant - 1, trees2)
lapply(list, function)
lapply(list(fit, fit2), coef)
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmF <- lm(Numeric ~ Year, hunger[,hunger$Sex == "Female"])
lmF <- lm(Numeric ~ Year, hunger[hunger$Sex == "Female",])
lmF <- lm(Numeric[Sex == "Female"] ~ Year[Sex == "Female"], hunger)
lmM <- lm(Numeric[Sex == "Male"] ~ Year[Sex == "Male"], hunger)
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, data = hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which = 1)
fitno <- lm(y ~ x, out[-1,])
fitno <- lm(y ~ x, out2[-1,])
plot(fitno, which = 1)
coef(fit) - coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1 - resid(fit)[1]/resno
head(hatvalues())
head(hatvalues(fit))
sigma <- sqrt(sum(resid(fit)^2)/nrow(resid(fit))
)
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- resid(fit)/ (sigma *sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which = 3)
plot(fit, which = 2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1 * sqrt(1 - hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2) - predict(fit,out2)
sum(dy^2)/ (2*sigma^2)
plot(fit, which = 5)
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality, swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ Agriculture + Education + Catholic + Infant.Mortality, swiss)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/df.residual(fit3)
n <- (deviance(fit1) - deviance(fit3))/(df.residual(fit1) - df.residual(fit3))
n/d
?pf
pf(n/d, 2, 43, lower.tail = FALSE)
shapiro.test(fit3$residuals)
play()
shapiro.test(fit1)
shapiro.test(fit1$residuals)
shapiro.test(fit3$residuals)
shapiro.test(fit5$residuals)
shapiro.test(fit6$residuals)
nxt()
anova(fit1, fit3, fit5, fit6)
data("mtcars")
head(mtcars)
table(mtcars$cyl)
library(dplyr)
head(mtcars)
mtcars <- mtcars %>% mutate(cylGrp = as.factor(cyl))
head(mtcars)
fit <- lm(mpg ~ clyGrp + wt, data = mtcars)
fit <- lm(mpg ~ cylGrp + wt, data = mtcars)
summary(fit)$coef
fitWtAdj <- lm(mpg ~ cylGrp + wt, data = mtcars)
fitWtUnadj <- lm(mpg ~ cylGrp, data = mtcars)
summary(fitWtAdj)$coef
summary(fitWtUnadj)$coef
head(mtcars)
fit <- lm(mpg ~ cylGrp + wt, data = mtcars)
fitInter <- lm(mpg ~ cylGrp + wt + cylGrp*wt, data = mtcars)
anova(fit, fitInter)
head(mtcars)
fit <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit)$coef
?mtcars
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
hatvalues(fit)
max(hatvalues(fit))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
dfbeta(fit)
dfbetas(fit)
q()
rm(list = ls())
install.packages("devtools")
devtools::install_github("jhudsl/collegeIncome")
library(collegeIncome)
data(college)
devtools::install_github("jhudsl/matahari")
TRUE
library(matahari)
devtools::install_github("jhudsl/matahari")
library(matahari)
devtools::install_github("jhudsl/matahari")
library(matahari)
install.packages("matahari")
library(matahari)
dance_start(value = FALSE, contents = FALSE)
head(college)
tail(college)
summary(college)
college[college$total == 124]
college[college$total == 124,]
college[college$total == max(college$total),]
library(dplyr)
college <- college %>% mutate(majorCatGroup == as.factor(major_category))
college <- college %>% mutate(majorCatGroup = as.factor(major_category))
table(college$majorCatGroup)
head(college)
fit25 <- lm(p25th ~ majorCatGroup - 1, college)
summary(fit25)$coef
fit25_1 <- lm(p25th ~ majorCatGroup, college)
summary(fit25_1)$coef
fitmedian <- lm(median ~ majorCatGroup - 1, college)
summary(fitmedian)$coef
fitmedian_1 <- lm(median ~ majorCatGroup, college)
summary(fitmedian_1)$coef
fitp75 <- lm(p75th ~ majorCatGroup - 1, college)
summary(fitp75)$coef
fitp75_1 <- lm(p75th ~ majorCatGroup - 1, college)
fitp75_1 <- lm(p75th ~ majorCatGroup, college)
summary(fitp75_1)$coef
summary(fitp75_1)
summary(fit25_1)
summary(fitmedian_1)
fitp75_1 <- lm(p75th ~ total + majorCatGroup, college)
summary(fitp75_1)$coef
fitp25_1 <- lm(p25th ~ total + majorCatGroup, college)
summary(fitp25_1)$coef
dance_save("~/Desktop/college_major_analysis.rds")
getwd()
dance_save("~/DA/college_major_analysis.rds")
data("mtcars")
library(dplyr)
names(mtcars)
mtcars <- mtcars %>% mutate(am = as.factor(am))
names(mtcars)
table(mtcars$am)
table(mtcars$drat)
table(mtcars$vs)
table(mtcars$gear)
table(mtcars$carb)
table(mtcars$qsec)
t.test(mpg ~ am, data = mtcars)
summary(mtcars$mpg["am" == 0])
summary(mtcars$mpg[,"am" == 0])
summary(mtcars$mpg["am" == 0,])
summary(mtcars$mpg[mtcars$am == 0,])
summary(mtcars$mpg[,mtcars$am == 0])
summary(mtcars$mpg[mtcars$am == 0])
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
head(AlzheimerDisease)
data(AlzheimerDisease)
head(AlzheimerDisease)
summary(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
rm(list = ls())
data(AlzheimerDisease)
head(predictors)
head(diagnosis)
data(concrete)
head(concrete)
head(mixtures)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(ISLR)
data("Wage")
summary(Wage)
inTrain <- createDataPartition(y = Wage$wage, p = 0.7, list = FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training)
dim(testing)
featurePlot(x=training, y = training$wage)
featurePlot(x=training, y = training$wage, plot = "pairs")
featurePlot(x=training[, c("age", "education", "jobclass")], y = training$wage, plot = "pairs")
qqplot(x = age, y = wage, data = training)
qplot(x = age, y = wage, data = training)
attach(training)
qplot(x= age, y = wage)
qplot(x= age, y = wage, colour = jobclass)
qq <- qplot(x= age, y = wage, colour = education)
qq + geom_smooth(method = "lm")
library(Hmisc)
?hmisc
head(wage)
install.packages("Hmisc")
library(Hmisc)
setwd("DA")
dir()
setwd("PML exercises")
dir()
setwd("HAR")
knitr::opts_chunk$set(echo = TRUE)
## Read the training set
training <- read.csv("pml-training.csv")
## Read the testing set
testing <- read.csv("pml-testing.csv")
rm(list = ls())
## Read the training set
training <- read.csv("pml-training.csv")
## Read the testing set
testing <- read.csv("pml-testing.csv")
## Load libraries for running the analysis and tests
library(caret) ## For Machine Learning modules
## Load libraries for running the analysis and tests
library(caret) ## For Machine Learning modules
library(ggplot2) ## For plots
library(dplyr) ## For data manipulation
head(training)
summary(classe)
summary(training$classe)
str(training)
names(training)
modFit <- train(classe ~., method = "rf", data =  training)
summary(training$classe)
head(training$classe)
tail(training$classe)
t <- training[is.na == FALSE,]
t <- training[is.na == FALSE]
t <- na.omit(training)
head(t)
modFit <- train(classe ~., method = "rf", data =  trainingNoNA)
trainingNoNA <- na.omit(training) ## Omit NAs in training data set
modFit <- train(classe ~., method = "rf", data =  trainingNoNA)
